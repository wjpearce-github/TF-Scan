name: "Terraform AWS"
on:
  pull_request:
    branches: 
      - main
  push:
    branches:
      - main
    paths:
      - 'feat/**'
      - 'fix/**'
      - 'wip/**'
      - '**.tf'
      - '**.tfvars'

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  plan:
    name: IAC - PLAN
    runs-on: ubuntu-latest
    
    steps:
      - name: Git Clone the Repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: "1.6.1"
          terraform_wrapper: false

      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722
        with:
          role-to-assume: arn:aws:iam::202533501269:role/TerraformDeploy
          aws-region: eu-west-2
          
      - name: Terraform init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan
        continue-on-error: true 

      - name: Upload Terraform Plan Artifact
        if: steps.plan.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.sha }}
          path: tfplan
          retention-days: 5

      - name: Comment PR with Plan Results
        uses: actions/github-script@v7 
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if the Terraform plan was successful
            const planStatus = "${{ steps.plan.outcome }}" === "success"
              ? "✅ Plan succeeded"
              : "❌ Plan failed";

            // Create a message to ask for approval if the plan succeeded
            const approvalMessage = planStatus === "✅ Plan succeeded"
              ? "\n\n### ⚠️ Changes detected! Review the plan above. Changes will be applied automatically when merged to main."
              : "";

            // Build the full comment body
            const commentBody = [
              "## Terraform Plan Results",
              "",
              `#### Terraform Initialization: \`${{ steps.init.outcome }}\``,
              `#### Terraform Validation: \`${{ steps.validate.outcome }}\``,
              `#### Terraform Plan: ${planStatus}`,
              "",
              "Terraform plan was uploaded as an artifact.",
              `[View it in the Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`,
              approvalMessage,
              "",
              `*Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`
            ].join("\n");

            // Post the comment to the pull request
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  apply:
    name: IAC - APPLY
    needs: plan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: terraform-prod
    
    steps:
      - name: Git Clone the Repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: "1.6.1"
          terraform_wrapper: false

      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722
        with:
          role-to-assume: arn:aws:iam::202533501269:role/TerraformDeploy
          aws-region: eu-west-2

      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ github.sha }}

      - name: Terraform init
        run: terraform init -input=false

      - name: Terraform Apply
        id: apply
        run: terraform apply -input=false tfplan

      - name: Terraform Output
        if: steps.apply.outcome == 'success'
        run: terraform output -json